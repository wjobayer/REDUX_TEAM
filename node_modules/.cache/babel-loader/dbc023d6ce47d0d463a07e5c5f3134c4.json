{"ast":null,"code":"import _slicedToArray from\"C:/project/React-Redux-Contact-Book/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{connect}from\"react-redux\";import{useHistory,useParams}from\"react-router\";import{toast}from\"react-toastify\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EditContact=function EditContact(_ref){var contacts=_ref.contacts,updateContact=_ref.updateContact;var _useParams=useParams(),id=_useParams.id;var history=useHistory();var currentContact=contacts.find(function(contact){return contact.id===parseInt(id);});useEffect(function(){setName(currentContact.name);setEmail(currentContact.email);setPhone(currentContact.phone);},[currentContact]);var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),phone=_useState6[0],setPhone=_useState6[1];var handleSubmit=function handleSubmit(e){e.preventDefault();var checkContactEmailExists=contacts.filter(function(contact){return contact.email===email&&contact.id!==currentContact.id?contact:null;});var checkContactPhoneExists=contacts.filter(function(contact){return contact.phone===phone&&contact.id!==currentContact.id?contact:null;});if(!email||!name||!phone){return toast.warning(\"Please fill in all fields!!\");}if(checkContactEmailExists.length>0){return toast.error(\"This email already exists!!\");}if(checkContactPhoneExists.length>0){return toast.error(\"This phone number already exists!!\");}var data={id:currentContact.id,email:email,name:name,phone:phone};updateContact(data);toast.success(\"Contact updated successfully!!\");history.push(\"/\");};return/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"row d-flex flex-column\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary ml-auto my-5\",onClick:function onClick(){return history.push(\"/\");},children:\"Go back\"}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6 mx-auto shadow p-5\",children:currentContact?/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",value:name,placeholder:\"Name\",onChange:function onChange(e){return setName(e.target.value);}})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",value:email,placeholder:\"Email\",onChange:function onChange(e){return setEmail(e.target.value);}})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{className:\"form-control\",value:phone,placeholder:\"Phone\",onChange:function onChange(e){return setPhone(e.target.value);}})}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group d-flex align-items-center justify-content-between my-2\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-primary\",children:\"Update Contact\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-danger\",onClick:function onClick(){return history.push(\"/\");},children:\"cancel\"})]})]}):/*#__PURE__*/_jsx(\"h1\",{className:\"text-center\",children:\"No Contact Found\"})})]})});};var mapStateToProps=function mapStateToProps(state){return{contacts:state};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{updateContact:function updateContact(data){dispatch({type:\"UPDATE_CONTACT\",payload:data});}};};export default connect(mapStateToProps,mapDispatchToProps)(EditContact);","map":{"version":3,"sources":["C:/project/React-Redux-Contact-Book/src/components/EditContact/index.js"],"names":["React","useEffect","useState","connect","useHistory","useParams","toast","EditContact","contacts","updateContact","id","history","currentContact","find","contact","parseInt","setName","name","setEmail","email","setPhone","phone","handleSubmit","e","preventDefault","checkContactEmailExists","filter","checkContactPhoneExists","warning","length","error","data","success","push","target","value","mapStateToProps","state","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst EditContact = ({ contacts, updateContact }) => {\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const currentContact = contacts.find(\r\n    (contact) => contact.id === parseInt(id)\r\n  );\r\n\r\n  useEffect(() => {\r\n    setName(currentContact.name);\r\n    setEmail(currentContact.email);\r\n    setPhone(currentContact.phone);\r\n  }, [currentContact]);\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const checkContactEmailExists = contacts.filter((contact) =>\r\n      contact.email === email && contact.id !== currentContact.id\r\n        ? contact\r\n        : null\r\n    );\r\n    const checkContactPhoneExists = contacts.filter((contact) =>\r\n      contact.phone === phone && contact.id !== currentContact.id\r\n        ? contact\r\n        : null\r\n    );\r\n\r\n    if (!email || !name || !phone) {\r\n      return toast.warning(\"Please fill in all fields!!\");\r\n    }\r\n    if (checkContactEmailExists.length > 0) {\r\n      return toast.error(\"This email already exists!!\");\r\n    }\r\n    if (checkContactPhoneExists.length > 0) {\r\n      return toast.error(\"This phone number already exists!!\");\r\n    }\r\n\r\n    const data = {\r\n      id: currentContact.id,\r\n      email,\r\n      name,\r\n      phone,\r\n    };\r\n\r\n    updateContact(data);\r\n    toast.success(\"Contact updated successfully!!\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row d-flex flex-column\">\r\n        <button\r\n          className=\"btn btn-primary ml-auto my-5\"\r\n          onClick={() => history.push(\"/\")}\r\n        >\r\n          Go back\r\n        </button>\r\n        <div className=\"col-md-6 mx-auto shadow p-5\">\r\n          {currentContact ? (\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  value={name}\r\n                  placeholder={\"Name\"}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  value={email}\r\n                  placeholder={\"Email\"}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  value={phone}\r\n                  placeholder={\"Phone\"}\r\n                  onChange={(e) => setPhone(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"form-group d-flex align-items-center justify-content-between my-2\">\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Update Contact\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => history.push(\"/\")}\r\n                >\r\n                  cancel\r\n                </button>\r\n              </div>\r\n            </form>\r\n          ) : (\r\n            <h1 className=\"text-center\">No Contact Found</h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateContact: (data) => {\r\n    dispatch({ type: \"UPDATE_CONTACT\", payload: data });\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditContact);\r\n"]},"metadata":{},"sourceType":"module"}